import { base44 } from './base44Client';



export const Core = base44.integrations.Core;

export const InvokeLLM = base44.integrations.Core.InvokeLLM;

export const SendEmail = base44.integrations.Core.SendEmail;

// Local Gemini client (REST)
import { LocalGeminiSettings } from './localEntities';

export async function GeminiGenerate({ prompt, model = 'gemini-1.5-flash', temperature = 0.7 }) {
  const settings = await LocalGeminiSettings.list();
  const apiKey = settings[0]?.api_key || '';
  const baseUrl = settings[0]?.base_url || 'https://generativelanguage.googleapis.com';
  if (!apiKey) throw new Error('Gemini API key not configured');
  const url = `${baseUrl}/v1beta/models/${encodeURIComponent(model)}:generateContent`;
  const body = {
    contents: [{ role: 'user', parts: [{ text: String(prompt || '') }]}],
    generationConfig: { temperature }
  };
  try {
    const res = await fetch(url, { method: 'POST', headers: { 'Content-Type': 'application/json', 'x-goog-api-key': apiKey }, body: JSON.stringify(body) });
    if (!res.ok) {
      const t = await res.text();
      throw new Error(`Gemini error ${res.status}: ${t}`);
    }
    const json = await res.json();
    const text = json?.candidates?.[0]?.content?.parts?.map(p => p.text).join('') || '';
    return { text, raw: json };
  } catch (e) {
    // Normalize network error message for UI
    const msg = e?.message || 'Failed to fetch';
    throw new Error(msg.includes('Failed to fetch') ? '网络请求失败（可能是网络或浏览器拦截）。请检查 API Key、网络、广告拦截插件，并重试。' : msg);
  }
}






