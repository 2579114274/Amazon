import React, { useEffect, useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { LocalGeminiSettings } from '@/api/localEntities';
import { GeminiGenerate } from '@/api/integrations';
import { Sparkles, Save, Send } from 'lucide-react';
import { Switch } from '@/components/ui/switch';

export default function GeminiManagement() {
  const [settings, setSettings] = useState({ api_key: '', base_url: 'https://generativelanguage.googleapis.com', model: 'gemini-1.5-flash', use_for_product_ai: false });
  const [saving, setSaving] = useState(false);
  const [prompt, setPrompt] = useState('Write a product tagline for crunchy peanut butter cereal.');
  const [output, setOutput] = useState('');
  const [testing, setTesting] = useState(false);
  const [notice, setNotice] = useState('');

  useEffect(() => { load(); }, []);

  async function load() {
    const list = await LocalGeminiSettings.list();
    if (list.length > 0) setSettings({ api_key: list[0].api_key || '', base_url: list[0].base_url || 'https://generativelanguage.googleapis.com', model: list[0].model || 'gemini-1.5-flash', use_for_product_ai: !!list[0].use_for_product_ai });
  }

  async function save() {
    setSaving(true);
    setNotice('');
    const list = await LocalGeminiSettings.list();
    const data = { api_key: (settings.api_key || '').trim(), base_url: (settings.base_url || 'https://generativelanguage.googleapis.com').trim(), model: settings.model || 'gemini-1.5-flash', use_for_product_ai: !!settings.use_for_product_ai };
    if (list.length > 0) await LocalGeminiSettings.update(list[0].id, data); else await LocalGeminiSettings.create(data);
    setSaving(false);
    setNotice('保存成功');
    window.setTimeout(() => setNotice(''), 2000);
  }

  async function testCall() {
    setTesting(true);
    setOutput('');
    try {
      const res = await GeminiGenerate({ prompt, model: settings.model });
      setOutput(res.text || '(empty response)');
    } catch (e) {
      setOutput('Error: ' + (e?.message || String(e)));
    }
    setTesting(false);
  }

  return (
    <div className="p-4 md:p-8">
      <header className="mb-6 flex items-center gap-2">
        <Sparkles className="w-5 h-5 text-gray-700" />
        <h1 className="text-2xl md:text-3xl font-bold text-gray-800">Gemini Developer API</h1>
      </header>

      {notice && (
        <div className="mb-4 p-3 rounded border bg-green-50 border-green-200 text-green-800">{notice}</div>
      )}

      <Card className="mb-6">
        <CardHeader><CardTitle>API Settings</CardTitle></CardHeader>
        <CardContent className="space-y-4">
          <div>
            <Label>API Key</Label>
            <Input type="password" value={settings.api_key} onChange={(e) => setSettings({ ...settings, api_key: e.target.value })} placeholder="AIza..." />
          </div>
          <div>
            <Label>Base URL</Label>
            <Input value={settings.base_url} onChange={(e) => setSettings({ ...settings, base_url: e.target.value })} placeholder="https://generativelanguage.googleapis.com" />
          </div>
          <div>
            <Label>Model</Label>
            <Input value={settings.model} onChange={(e) => setSettings({ ...settings, model: e.target.value })} placeholder="gemini-1.5-flash" />
          </div>
          <div className="flex items-center gap-2">
            <Switch id="use_gemini_for_product_ai" checked={!!settings.use_for_product_ai} onCheckedChange={(v) => setSettings({ ...settings, use_for_product_ai: !!v })} />
            <Label htmlFor="use_gemini_for_product_ai">在商品批量描述生成中使用 Gemini</Label>
          </div>
          <div className="flex justify-end">
            <Button onClick={save} disabled={saving} className="min-w-[140px]"><Save className="w-4 h-4 mr-2" />{saving ? '保存中...' : '保存'}</Button>
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader><CardTitle>Quick Test</CardTitle></CardHeader>
        <CardContent className="space-y-3">
          <div>
            <Label>Prompt</Label>
            <Textarea rows={4} value={prompt} onChange={(e) => setPrompt(e.target.value)} />
          </div>
          <div className="flex justify-end">
            <Button onClick={testCall} disabled={testing || !settings.api_key}><Send className="w-4 h-4 mr-2" />{testing ? '测试中...' : '发送'}</Button>
          </div>
          <div>
            <Label>Output</Label>
            <Textarea rows={6} readOnly value={output} />
          </div>
        </CardContent>
      </Card>
    </div>
  );
} 